package fql;

import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

/**
 * 
 * @author ryan
 *
 * Contains global constants for debugging.
 */
public class DEBUG {
	
	public static String prelude = 
			"DROP DATABASE FQL; CREATE DATABASE FQL; USE FQL; SET @guid := 0;";
	
	public static  boolean MultiView = true;

	public static int varlen = 128;

	public static boolean SHOW_QUERY_PATHS = true;
	
	public static  Intermediate INTERMEDIATE = Intermediate.NONE;

	public static  boolean VALIDATE = true;
	
	public static  int MAX_PATH_LENGTH = 8;

	public static  int MAX_DENOTE_ITERATIONS = 64;
	
	//public static int MAX_JOIN_SIZE = 1024;
	
	public static  boolean ALLOW_INFINITES = false; 
	
	//public static boolean CHECK_MAPPINGS = false;
	
	public static boolean DO_NOT_GUIDIFY = false;
	
	public enum Intermediate { SOME, NONE, ALL };
	
	static String label1text = "If un-checked, the schemas in the viewer for queries will not contain any arrows.";
	static String label2text = "<html>The none and some options only shows declarations from the input program.<br>The all option shows all declarations including those generated by query composition.<br>The some option suppresses identity mappings.</html>";
	static String label3text = "<html>Instances in FQL must have globally unique keys.<br>To ensure this, FQL (and the generated SQL) will often compute new isomorphic instances with freshly chosen keys.<br>For debugging purposes it is sometimes useful to suppress this behavior.";
	static String label4text = "<html>By not performing the check that a mapping takes path equivalences to path equivalences,<br>it is possible to compute Delta for infinite schemas.<br>See the employees example.</html>";
	static String label5text = "This is an internal consistency check that checks if intermediate categories generated by FQL do in fact obey the category axioms.";
	static String label6text = "Bounds the maximum length that the paths in a schema can be.";
	static String label7text = "Bounds the maximum size of the category denoted by schemas.";
	static String label8text = "Sets the size of Strings in the SQL output (used for ID columns and string columns).";
	static String labelMtext = "Allows multiple viewers for the same editor.";
	public static void showOptions() {
		JPanel p = new JPanel(new GridLayout(10, 2));
		
		JCheckBox jcbM = new JCheckBox("", MultiView);
		jcbM.setToolTipText(labelMtext);
		JLabel labelM = new JLabel("Allow multiple viewers per editor:");
		p.add(labelM);
		p.add(jcbM);
		
		JCheckBox jcb1 = new JCheckBox("", SHOW_QUERY_PATHS);
		JLabel label1 = new JLabel("Draw arrows in query graphs:");
		label1.setToolTipText(label1text);
		p.add(label1);
		p.add(jcb1);
		
		JRadioButton noneb = new JRadioButton("none");
		JRadioButton somb = new JRadioButton("some");
		JRadioButton allb = new JRadioButton("all");
		ButtonGroup bg = new ButtonGroup();
		bg.add(noneb);
		bg.add(somb);
		bg.add(allb);
		if (INTERMEDIATE == Intermediate.SOME) {
			somb.setSelected(true);
		} else if (INTERMEDIATE == Intermediate.NONE) {
			noneb.setSelected(true);
		} else if (INTERMEDIATE == Intermediate.ALL) {
			allb.setSelected(true);
		} else {
			throw new RuntimeException();
		}
		
		//	JPanel p0 = new JPanel();
		JLabel label2 = new JLabel("Show intermediate declarations:");
		label2.setToolTipText(label2text);
			p.add(label2);
			JPanel xxx = new JPanel();
			xxx.add(noneb);
			xxx.add(somb);
			xxx.add(allb);
			p.add(xxx);
		
		JCheckBox jcbX = new JCheckBox("", DO_NOT_GUIDIFY);
		//	JPanel p0 = new JPanel();
		JLabel label3 = new JLabel("Do not GUIDify (dangerous):");
		label3.setToolTipText(label3text);
			p.add(label3);
			p.add(jcbX);
		
		JCheckBox jcb0 = new JCheckBox("", ALLOW_INFINITES);
	//	JPanel p0 = new JPanel();
		JLabel label4 = new JLabel("Do not validate mappings:"); 
		label4.setToolTipText(label4text);
		p.add(label4);
		p.add(jcb0);
		
		JCheckBox jcb = new JCheckBox("", VALIDATE);
	//	JPanel p0 = new JPanel();
		JLabel label5 = new JLabel("Validate all categories:");
		label5.setToolTipText(label5text);
		p.add(label5);
		p.add(jcb);
		//p.add(jcb);
		
		//JPanel p1 = new JPanel();
		JTextField plen = new JTextField(Integer.toString(MAX_PATH_LENGTH));
		JLabel label6 = new JLabel("Maximum path length:");
		label6.setToolTipText(label6text);
		p.add(label6);
		p.add(plen);
		//p.add(p1);
		
		//JPanel p2 = new JPanel();
		JTextField iter = new JTextField(Integer.toString(MAX_DENOTE_ITERATIONS));
		JLabel label7 = new JLabel("Maximum category size:");
		label7.setToolTipText(label7text);
		p.add(label7);
		p.add(iter);
		//p.add(p2);
		
		JTextField vlen = new JTextField(Integer.toString(varlen));
		JLabel label8 = new JLabel("VARCHAR size:");
		label8.setToolTipText(label8text);
		p.add(label8);
		p.add(vlen);
		
		JTextField area = new JTextField(12);
		//JTextArea area = new JTextArea(1, 14);
		area.setText(prelude);
		JLabel areaLabel = new JLabel("Generated SQL prelude:");
		areaLabel.setToolTipText("Set the prelude for the generated SQL.");
		p.add(areaLabel);
		p.add(area);
		area.setMaximumSize(new Dimension(200,300));
		
		
//		JTextField sz = new JTextField(Integer.toString(MAX_JOIN_SIZE));
//		p.add(new JLabel("Maximum potential join size:"));
//		p.add(iter);
		
		int ret = JOptionPane.showConfirmDialog(null, p, "Options", JOptionPane.OK_CANCEL_OPTION);
		if (ret == JOptionPane.YES_OPTION) {
			int a = MAX_PATH_LENGTH;
			int b = MAX_DENOTE_ITERATIONS;
			int d = varlen;
			//int c = MAX_JOIN_SIZE;
			try {
				a = Integer.parseInt(plen.getText());
				b = Integer.parseInt(iter.getText());
				d = Integer.parseInt(vlen.getText());
		//		c = Integer.parseInt(sz.getText());
			} catch (NumberFormatException nfe) {
				return;
			}
			ALLOW_INFINITES = jcb0.isSelected();
			VALIDATE = jcb.isSelected();
			DO_NOT_GUIDIFY = jcbX.isSelected();
			SHOW_QUERY_PATHS = jcb1.isSelected();
			MultiView = jcbM.isSelected();
			if (somb.isSelected()) {
				INTERMEDIATE = Intermediate.SOME;
			} else if (noneb.isSelected()) {
				INTERMEDIATE = Intermediate.NONE;
			} else if (allb.isSelected()) {
				INTERMEDIATE = Intermediate.ALL;
			} else {
				throw new RuntimeException();
			}
			
	//		CHECK_MAPPINGS = jcb1.isSelected();
			MAX_PATH_LENGTH = a;
			MAX_DENOTE_ITERATIONS = b;
			varlen = d;
			prelude = area.getText();
			//MAX_JOIN_SIZE = c;
		}
	}
	
	public static void showAbout() {
		JOptionPane.showMessageDialog(null, about, "About", JOptionPane.INFORMATION_MESSAGE);
	}
	
	static String about = "FQL IDE Copyright (C) 2013 David Spivak and Ryan Wisnesky"
			              + "\nLicense: Creative-Commons Attribution-NonCommercial-NoDerivs 3.0 Unported"
			 	          + "\n\nLibraries used:\n\nJetty (servlets)\nJUNG (graph visualization)\nRSyntaxTextArea (code editor)";

	

}
