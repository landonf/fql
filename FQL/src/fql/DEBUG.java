package fql;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * 
 * @author ryan
 * 
 *         Contains global constants for debugging.
 */
@SuppressWarnings("serial")
public class DEBUG implements Serializable {

	public static DEBUG debug = new DEBUG();
	
	public void clear() {
		debug = new DEBUG();
	}
	public void save() {
		try {
			FileOutputStream fileOut = new FileOutputStream("fql_options.ser");
			ObjectOutputStream out = new ObjectOutputStream(fileOut);
			out.writeObject(this);
			out.close();
			fileOut.close();
		} catch (Exception i) {
			i.printStackTrace();
			JOptionPane.showMessageDialog(null, i.getLocalizedMessage());
		}
	}
	
	

	public static DEBUG load(boolean silent) {
		try {
			FileInputStream fileIn = new FileInputStream("fql_options.ser");
			ObjectInputStream in = new ObjectInputStream(fileIn);
			DEBUG e = (DEBUG) in.readObject();
			if (e != null) {
				 if (silent) {
					 debug = e;
				 } else {
					 e.showOptions();
				 }
			}
			in.close();
			fileIn.close();
		} catch (Exception i) {
			if (!silent) {
				i.printStackTrace();
				JOptionPane.showMessageDialog(null, i.getLocalizedMessage());
			}
		}
		return null;
	}

	public String prelude = "CREATE DATABASE FQL; USE FQL; SET @guid := 0;";

	public String afterlude = "DROP DATABASE FQL; "; //DROP DATABASE FQL;";
	
	public String jdbcUrl = "jdbc:mysql://localhost:3306/?user=root";
	public boolean useJDBC = false;
	public String jdbcClass = "com.mysql.jdbc.Driver";

	public boolean MultiView = true;

	public int varlen = 128;

	public boolean VALIDATE = true;

	public int MAX_PATH_LENGTH = 8;

	public int MAX_DENOTE_ITERATIONS = 64;

	public boolean ALL_GR_PATHS = false;

	// public static boolean VALIDATE_WITH_EDS = false;

	// public static int MAX_JOIN_SIZE = 1024;

	public boolean ALLOW_INFINITES = false;

	// public static boolean DO_NOT_GUIDIFY = false;

	public  boolean schema_graphical = true;
	public  boolean schema_tabular = true;
	public  boolean schema_textual = true;
	public  boolean schema_denotation = true;
	public  boolean schema_ed = true;

	public  boolean mapping_graphical = true;
	public  boolean mapping_tabular = true;
	public  boolean mapping_textual = true;
	public  boolean mapping_ed = true;

	public  boolean inst_graphical = true;
	public  boolean inst_tabular = true;
	public  boolean inst_textual = true;
	public  boolean inst_joined = true;
	public  boolean inst_gr = false;
	public  boolean inst_obs = false;

	public  boolean transform_graphical = true;
	public  boolean transform_tabular = true;
	public  boolean transform_textual = true;

	static String label1text = "If un-checked, the schemas in the viewer for queries will not contain any arrows.";
	static String label2text = "<html>The none and some options only shows declarations from the input program.<br>The all option shows all declarations including those generated by query composition.<br>The some option suppresses identity mappings.</html>";
	static String label3text = "<html>Instances in FQL must have globally unique keys.<br>To ensure this, FQL (and the generated SQL) will often compute new isomorphic instances with freshly chosen keys.<br>For debugging purposes it is sometimes useful to suppress this behavior.";
	static String label4text = "<html>By not performing the check that a mapping takes path equivalences to path equivalences,<br>it is possible to compute Delta for infinite schemas.<br>See the employees example.</html>";
	static String label5text = "This is an internal consistency check that checks if intermediate categories generated by FQL do in fact obey the category axioms.";
	static String label6text = "Bounds the maximum length that the paths in a schema can be.";
	static String label7text = "Bounds the maximum size of the category denoted by schemas.";
	static String label8text = "Sets the size of Strings in the SQL output (used for ID columns and string columns).";
	static String labelMtext = "Allows multiple viewers for the same editor.";

	public void showOptions() {
		JPanel p = new JPanel(new GridLayout(16, 2));
		/*
		 * JCheckBox ed = new JCheckBox("", VALIDATE_WITH_EDS);
		 * ed.setToolTipText
		 * ("Validates Data Migration using Embedded Dependencies"); JLabel edL
		 * = new JLabel("Validate using EDs:"); p.add(edL); p.add(ed);
		 */
		JCheckBox gr = new JCheckBox("", ALL_GR_PATHS);
		gr.setToolTipText("Show all paths in category of elements");
		JLabel grL = new JLabel("Show all paths in Grothendieck:");
		p.add(grL);
		p.add(gr);

		JCheckBox jcbM = new JCheckBox("", MultiView);
		jcbM.setToolTipText(labelMtext);
		JLabel labelM = new JLabel("Allow multiple viewers per editor:");
		p.add(labelM);
		p.add(jcbM);

		/*
		 * JCheckBox jcbX = new JCheckBox("", DO_NOT_GUIDIFY); JPanel p0 = new
		 * JPanel(); JLabel label3 = new JLabel("Do not GUIDify (dangerous):");
		 * label3.setToolTipText(label3text); p.add(label3); p.add(jcbX);
		 */

		JCheckBox jcb0 = new JCheckBox("", ALLOW_INFINITES);
		JLabel label4 = new JLabel(
				"Do not validate mappings (allows some infinte schemas):");
		label4.setToolTipText(label4text);
		p.add(label4);
		p.add(jcb0);

		JCheckBox jcb = new JCheckBox("", VALIDATE);
		JLabel label5 = new JLabel("Validate all categories:");
		label5.setToolTipText(label5text);
		p.add(label5);
		p.add(jcb);

		JCheckBox jdbcBox = new JCheckBox("", useJDBC);
		JLabel jdbcLabel = new JLabel("Use JDBC:");
		jdbcLabel
				.setToolTipText("Causes FQL to execute the generated SQL against a JDBC connection.");
		p.add(jdbcLabel);
		p.add(jdbcBox);

		JTextField jdbcField = new JTextField(jdbcUrl);
		JLabel jdbcLabel2 = new JLabel("JDBC URL:");
		jdbcLabel2.setToolTipText("The JDBC connection to use.");
		p.add(jdbcLabel2);
		p.add(jdbcField);

		JTextField jdbcField2 = new JTextField(jdbcClass);
		JLabel jdbcLabel22 = new JLabel("JDBC Driver Class:");
		jdbcLabel22.setToolTipText("The JDBC class to use.");
		p.add(jdbcLabel22);
		p.add(jdbcField2);

		JTextField plen = new JTextField(Integer.toString(MAX_PATH_LENGTH));
		JLabel label6 = new JLabel("Maximum path length:");
		label6.setToolTipText(label6text);
		p.add(label6);
		p.add(plen);

		JTextField iter = new JTextField(
				Integer.toString(MAX_DENOTE_ITERATIONS));
		JLabel label7 = new JLabel("Maximum category size:");
		label7.setToolTipText(label7text);
		p.add(label7);
		p.add(iter);

		JTextField vlen = new JTextField(Integer.toString(varlen));
		JLabel label8 = new JLabel("VARCHAR size:");
		label8.setToolTipText(label8text);
		p.add(label8);
		p.add(vlen);

		JTextField area = new JTextField(12);
		area.setText(prelude);
		JLabel areaLabel = new JLabel("Generated SQL prelude:");
		areaLabel.setToolTipText("Set the prelude for the generated SQL.");
		p.add(areaLabel);
		p.add(area);
		area.setMaximumSize(new Dimension(200, 300));
		
		JTextField area2 = new JTextField(12);
		area2.setText(afterlude);
		JLabel areaLabel2 = new JLabel("Generated SQL postlude:");
		areaLabel2.setToolTipText("Set the postlude for the generated SQL.");
		p.add(areaLabel2);
		p.add(area2);
		area2.setMaximumSize(new Dimension(200, 300));

		JPanel schemaArea = new JPanel(new FlowLayout(FlowLayout.LEFT));
		JCheckBox schema_graphical_box = new JCheckBox("Graph",
				schema_graphical);
		JCheckBox schema_textual_box = new JCheckBox("Text", schema_textual);
		JCheckBox schema_tabular_box = new JCheckBox("Table", schema_tabular);
		JCheckBox schema_ed_box = new JCheckBox("ED", schema_ed);
		JCheckBox schema_denotation_box = new JCheckBox("Denotation",
				schema_denotation);
		schemaArea.add(schema_graphical_box);
		schemaArea.add(schema_textual_box);
		schemaArea.add(schema_tabular_box);
		schemaArea.add(schema_ed_box);
		schemaArea.add(schema_denotation_box);
		JLabel schema_label = new JLabel("Schema viewer panels:");
		schema_label.setToolTipText("Sets which viewers to use for schemas.");
		p.add(schema_label);
		p.add(schemaArea);

		JPanel mappingArea = new JPanel(new FlowLayout(FlowLayout.LEFT));
		JCheckBox mapping_graphical_box = new JCheckBox("Graph",
				mapping_graphical);
		JCheckBox mapping_textual_box = new JCheckBox("Text", mapping_textual);
		JCheckBox mapping_tabular_box = new JCheckBox("Table", mapping_tabular);
		JCheckBox mapping_ed_box = new JCheckBox("ED", mapping_ed);
		mappingArea.add(mapping_graphical_box);
		mappingArea.add(mapping_textual_box);
		mappingArea.add(mapping_tabular_box);
		mappingArea.add(mapping_ed_box);
		JLabel mapping_label = new JLabel("Mapping viewer panels:");
		mapping_label.setToolTipText("Sets which viewers to use for mappings.");
		p.add(mapping_label);
		p.add(mappingArea);

		JPanel instArea = new JPanel(new FlowLayout(FlowLayout.LEFT));
		JCheckBox inst_graphical_box = new JCheckBox("Graph", inst_graphical);
		JCheckBox inst_textual_box = new JCheckBox("Text", inst_textual);
		JCheckBox inst_tabular_box = new JCheckBox("Table", inst_tabular);
		JCheckBox inst_joined_box = new JCheckBox("Joined", inst_joined);
		JCheckBox inst_gr_box = new JCheckBox("Elements", inst_gr);
		JCheckBox inst_obs_box = new JCheckBox("Observables", inst_obs);
		instArea.add(inst_graphical_box);
		instArea.add(inst_textual_box);
		instArea.add(inst_tabular_box);
		instArea.add(inst_joined_box);
		instArea.add(inst_gr_box);
		instArea.add(inst_obs_box);
		JLabel inst_label = new JLabel("Instance viewer panels:");
		inst_label.setToolTipText("Sets which viewers to use for instances.");
		p.add(inst_label);
		p.add(instArea);

		JPanel transformArea = new JPanel(new FlowLayout(FlowLayout.LEFT));
		JCheckBox transform_graphical_box = new JCheckBox("Graph",
				transform_graphical);
		JCheckBox transform_textual_box = new JCheckBox("Text",
				transform_textual);
		JCheckBox transform_tabular_box = new JCheckBox("Table",
				transform_tabular);
		transformArea.add(transform_graphical_box);
		transformArea.add(transform_textual_box);
		transformArea.add(transform_tabular_box);
		JLabel transform_label = new JLabel("Transform viewer panels:");
		mapping_label
				.setToolTipText("Sets which viewers to use for transforms.");
		p.add(transform_label);
		p.add(transformArea);

		
		
		int ret = JOptionPane.showOptionDialog(null, p, "Options", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, new String[]{ "OK" , "Cancel", "Reset", "Save", "Load" }, "OK");
//				showConfirmDialog(null, p, "Options",
	//			JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
		
		if (ret == 0 || ret == 3) {
			int a = MAX_PATH_LENGTH;
			int b = MAX_DENOTE_ITERATIONS;
			int d = varlen;
			try {
				a = Integer.parseInt(plen.getText());
				b = Integer.parseInt(iter.getText());
				d = Integer.parseInt(vlen.getText());
			} catch (NumberFormatException nfe) {
				return;
			}
			// VALIDATE_WITH_EDS = ed.isSelected();
			ALL_GR_PATHS = gr.isSelected();
			ALLOW_INFINITES = jcb0.isSelected();
			VALIDATE = jcb.isSelected();
			// DO_NOT_GUIDIFY = jcbX.isSelected();
			// SHOW_QUERY_PATHS = jcb1.isSelected();
			MultiView = jcbM.isSelected();

			// CHECK_MAPPINGS = jcb1.isSelected();
			MAX_PATH_LENGTH = a;
			MAX_DENOTE_ITERATIONS = b;
			varlen = d;
			prelude = area.getText();
			afterlude = area2.getText();
			
			schema_denotation = schema_denotation_box.isSelected();
			schema_ed = schema_ed_box.isSelected();
			schema_graphical = schema_graphical_box.isSelected();
			schema_tabular = schema_tabular_box.isSelected();
			schema_textual = schema_textual_box.isSelected();

			mapping_ed = mapping_ed_box.isSelected();
			mapping_graphical = mapping_graphical_box.isSelected();
			mapping_tabular = mapping_tabular_box.isSelected();
			mapping_textual = mapping_textual_box.isSelected();

			inst_graphical = inst_graphical_box.isSelected();
			inst_tabular = inst_tabular_box.isSelected();
			inst_textual = inst_textual_box.isSelected();
			inst_joined = inst_joined_box.isSelected();
			inst_gr = inst_gr_box.isSelected();
			inst_obs = inst_obs_box.isSelected();

			transform_graphical = transform_graphical_box.isSelected();
			transform_tabular = transform_tabular_box.isSelected();
			transform_textual = transform_textual_box.isSelected();

			useJDBC = jdbcBox.isSelected();
			jdbcUrl = jdbcField.getText();
			jdbcClass = jdbcField2.getText();
		} else if (ret == 2) {
			new DEBUG().showOptions();
		}
		if (ret == 3) { //save
			save();
			showOptions();
		} 
		
		if (ret == 4) { //load
			load(false);
			//debug.showOptions();
		}
	}

	public static void showAbout() {
		JOptionPane.showMessageDialog(null, about, "About",
				JOptionPane.PLAIN_MESSAGE, null);
	}

	static String about = "FQL IDE Copyright (C) 2012-2014 David Spivak and Ryan Wisnesky"
			+ "\n\nLicense: Creative-Commons Attribution-NonCommercial-NoDerivs 3.0 Unported"
			+ "\n\nLibraries used:\n\nJParsec (parsing)\nJUNG (graph visualization)\nRSyntaxTextArea (code editor)";

	public static int chase_limit = 64;

}
