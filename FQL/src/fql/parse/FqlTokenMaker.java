/* The following code was generated by JFlex 1.4.3 on 4/17/14 10:31 PM */

/*
 * Generated on 4/17/14 10:31 PM
 */
package fql.parse;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("unused")
public class FqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\75\1\24"+
    "\1\76\1\23\1\20\1\4\1\72\1\72\1\4\4\4\2\3\1\36"+
    "\1\24\1\15\1\75\1\77\1\24\1\16\1\55\3\5\1\42\1\5"+
    "\1\65\1\1\1\60\2\1\1\64\1\66\1\62\2\1\1\40\1\43"+
    "\1\56\1\61\1\41\1\63\1\57\1\1\1\44\1\1\1\25\1\10"+
    "\1\25\1\100\1\2\1\0\1\47\1\13\1\50\1\67\1\35\1\32"+
    "\1\51\1\26\1\33\1\1\1\73\1\34\1\46\1\45\1\54\1\30"+
    "\1\52\1\12\1\31\1\27\1\11\1\70\1\37\1\71\1\53\1\74"+
    "\1\22\1\100\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\24\1\1\10\1\11\5\10\1\12\3\10"+
    "\1\0\1\13\2\1\2\4\1\14\1\15\1\16\3\1"+
    "\1\17\37\1\1\20\11\0\3\1\1\4\1\21\1\4"+
    "\12\1\1\22\27\1\11\0\2\1\1\4\7\1\1\23"+
    "\17\1\2\0\1\24\2\0\1\25\1\0\1\1\1\4"+
    "\13\1\5\0\1\1\1\4\23\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\303\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\303\0\303\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\303\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\303\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\303\0\303\0\303\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0104\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\303\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\303"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u0104\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u0104\0\u2512"+
    "\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922"+
    "\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2963\0\u2e36\0\u2a26\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8"+
    "\0\u3309\0\u334a\0\u338b\0\u33cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\15\1\5\1\25\1\5\1\26\2\5"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\5\1\34"+
    "\1\35\1\36\10\5\1\37\1\40\1\5\1\6\1\41"+
    "\1\5\1\15\1\42\1\4\1\15\7\43\1\44\11\43"+
    "\1\45\4\43\1\46\3\43\1\47\4\43\1\50\41\43"+
    "\7\51\1\52\16\51\1\53\3\51\1\54\4\51\1\55"+
    "\41\51\102\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\36\5\4\0\3\57\2\6\1\57\2\0\4\57"+
    "\2\0\1\57\7\0\10\57\1\0\33\57\1\6\2\57"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\6\5\1\60\27\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\61\1\0\36\5\4\0\7\12\1\62"+
    "\1\63\3\12\1\64\64\12\17\0\1\13\101\0\1\65"+
    "\1\66\60\0\5\5\2\0\1\56\1\5\1\67\1\5"+
    "\12\0\1\70\7\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\1\5\1\71\1\5\12\0\5\5\1\72\2\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\1\73\2\5"+
    "\12\0\1\5\1\74\3\5\1\75\2\5\1\0\6\5"+
    "\1\76\2\5\1\77\24\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\3\5\1\100\4\5\1\0\10\5\1\101"+
    "\25\5\5\0\5\5\2\0\1\56\3\5\12\0\3\5"+
    "\1\102\4\5\1\0\6\5\1\103\1\104\20\5\1\72"+
    "\5\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\6\5\1\105\4\5\1\106\15\5\1\107\1\110"+
    "\3\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\2\5\1\111\33\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\24\5\1\112\11\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\15\5"+
    "\1\113\20\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\10\5\1\114\25\5\5\0\5\5\2\0"+
    "\1\56\1\5\1\115\1\5\12\0\1\5\1\116\1\117"+
    "\5\5\1\0\6\5\1\76\27\5\5\0\5\5\2\0"+
    "\1\56\1\120\2\5\12\0\1\121\7\5\1\0\15\5"+
    "\1\122\20\5\5\0\5\5\2\0\1\56\1\123\2\5"+
    "\12\0\10\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\1\5\1\72\1\5\12\0\2\5\1\124\5\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\17\5\1\125\16\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\21\5\1\126\14\5\5\0"+
    "\5\5\2\0\1\56\1\5\1\71\1\5\12\0\7\5"+
    "\1\127\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\15\5\1\130\20\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\131\1\0\36\5"+
    "\103\0\1\15\1\0\7\43\1\0\11\43\1\0\4\43"+
    "\1\0\3\43\1\0\4\43\1\0\41\43\20\0\1\132"+
    "\107\0\1\133\100\0\1\134\3\0\1\135\104\0\1\136"+
    "\41\0\7\51\1\0\16\51\1\0\3\51\1\0\4\51"+
    "\1\0\41\51\27\0\1\137\100\0\1\140\3\0\1\141"+
    "\104\0\1\142\52\0\1\143\67\0\6\57\2\0\4\57"+
    "\2\0\1\57\7\0\10\57\1\0\36\57\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\5\5\1\144\2\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\1\5"+
    "\1\145\4\5\1\146\1\5\1\0\36\5\4\0\10\62"+
    "\1\147\3\62\1\150\70\62\1\12\1\62\1\12\1\0"+
    "\1\12\1\151\3\12\12\62\1\12\2\62\1\12\12\62"+
    "\1\12\24\62\1\12\6\62\1\0\5\5\2\0\1\56"+
    "\1\152\2\5\12\0\10\5\1\0\10\5\1\153\25\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\7\5\1\154"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\155\20\5\5\0\5\5\2\0"+
    "\1\56\2\5\1\156\12\0\10\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\1\5\1\157\1\5\12\0\10\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\12\5\1\160\23\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\30\5\1\72\5\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\1\161\7\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\5\1\72\6\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\162\1\5\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\15\5\1\163\20\5\5\0\5\5\2\0\1\56\1\5"+
    "\1\72\1\5\12\0\1\5\1\164\1\5\1\165\2\5"+
    "\1\72\1\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\166\5\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\1\167\2\5\12\0\10\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\1\170\2\5\12\0"+
    "\10\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\10\5\1\171\25\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\172\6\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\3\5\1\173\32\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\16\5\1\174\17\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\1\5\1\72\6\5"+
    "\1\0\30\5\1\175\5\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\5\1\176\1\177\5\5\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\1\5\1\200\1\5\12\0"+
    "\10\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\201\6\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\2\5\1\202\5\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\1\5\1\203\1\5"+
    "\12\0\10\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\10\5\1\204\25\5\5\0"+
    "\5\5\2\0\1\56\1\5\1\205\1\5\12\0\10\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\7\5\1\206\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\207\5\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\20\5"+
    "\1\210\15\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\26\5\1\211\7\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\212\1\5\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\5\5\1\76"+
    "\2\5\1\0\36\5\5\0\5\5\2\0\1\56\1\5"+
    "\1\213\1\5\12\0\10\5\1\0\36\5\33\0\1\214"+
    "\101\0\1\215\104\0\1\216\103\0\1\217\70\0\1\220"+
    "\101\0\1\221\104\0\1\222\103\0\1\223\44\0\3\224"+
    "\5\0\1\224\16\0\1\224\2\0\1\224\4\0\1\224"+
    "\4\0\2\224\4\0\1\224\11\0\1\224\2\0\1\224"+
    "\7\0\5\5\2\0\1\56\3\5\12\0\1\5\1\72"+
    "\6\5\1\0\15\5\1\154\20\5\5\0\5\5\2\0"+
    "\1\56\1\225\2\5\12\0\10\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\10\5"+
    "\1\226\25\5\4\0\7\62\1\0\74\62\3\227\2\62"+
    "\1\147\2\62\1\227\1\150\15\62\1\227\2\62\1\227"+
    "\4\62\1\227\4\62\2\227\4\62\1\227\11\62\1\227"+
    "\2\62\1\227\6\62\1\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\72\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\6\5\1\230\27\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\6\5\1\72\27\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\2\5\1\72\5\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\3\5\1\231\4\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\5\5"+
    "\1\232\2\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\7\5\1\233\26\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\7\5\1\234\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\3\5"+
    "\1\152\4\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\33\5\1\72\2\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\1\5\1\235\6\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\6\5\1\236\1\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\7\5\1\237\26\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\10\5\1\240\25\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\6\5\1\72\1\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\241\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\4\5\1\242\31\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\25\5\1\72\10\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\243\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\11\5\1\244\24\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\2\5\1\245\5\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\15\5\1\246"+
    "\20\5\5\0\5\5\2\0\1\56\1\5\1\247\1\5"+
    "\12\0\10\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\6\5\1\250\1\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\1\5\1\250\1\5\12\0\10\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\1\5\1\72"+
    "\1\5\12\0\10\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\251\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\1\5\1\252\1\5\12\0\10\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\253\20\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\4\5\1\254\31\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\27\5\1\255\6\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\233\6\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\6\5\1\256"+
    "\27\5\34\0\1\257\106\0\1\260\77\0\1\215\66\0"+
    "\1\261\105\0\1\262\106\0\1\263\77\0\1\221\66\0"+
    "\1\264\60\0\3\265\5\0\1\265\16\0\1\265\2\0"+
    "\1\265\4\0\1\265\4\0\2\265\4\0\1\265\11\0"+
    "\1\265\2\0\1\265\7\0\5\5\2\0\1\56\1\5"+
    "\1\154\1\5\12\0\10\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\266\6\5\1\0"+
    "\36\5\4\0\3\62\3\267\2\62\1\147\2\62\1\267"+
    "\1\150\15\62\1\267\2\62\1\267\4\62\1\267\4\62"+
    "\2\267\4\62\1\267\11\62\1\267\2\62\1\267\6\62"+
    "\1\0\5\5\2\0\1\56\3\5\12\0\3\5\1\270"+
    "\4\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\11\5\1\271\24\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\6\5\1\272"+
    "\27\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\10\5\1\72\25\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\7\5\1\273\26\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\10\5"+
    "\1\274\25\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\175\2\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\1\5\1\275\6\5\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\1\5\1\276\1\5\12\0"+
    "\10\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\5\5\1\237\30\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\3\5\1\72\4\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\1\72"+
    "\7\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\277\2\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\1\243\35\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\5\5\1\300"+
    "\2\5\1\0\36\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\14\5\1\72\21\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\145\6\5\1\0"+
    "\36\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\14\5\1\237\21\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\3\5\1\301\4\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\21\5"+
    "\1\302\14\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\16\5\1\72\17\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\171\1\0\36\5\35\0"+
    "\1\215\4\0\1\260\62\0\1\303\61\0\1\261\1\304"+
    "\3\261\1\304\2\0\3\261\2\0\1\304\1\0\1\261"+
    "\1\304\1\0\3\304\10\261\1\304\36\261\2\304\33\0"+
    "\1\221\4\0\1\263\62\0\1\305\61\0\1\264\1\306"+
    "\3\264\1\306\2\0\3\264\2\0\1\306\1\0\1\264"+
    "\1\306\1\0\3\306\10\264\1\306\36\264\2\306\5\0"+
    "\3\307\5\0\1\307\16\0\1\307\2\0\1\307\4\0"+
    "\1\307\4\0\2\307\4\0\1\307\11\0\1\307\2\0"+
    "\1\307\7\0\5\5\2\0\1\56\3\5\12\0\5\5"+
    "\1\310\2\5\1\0\36\5\4\0\3\62\3\311\2\62"+
    "\1\147\2\62\1\311\1\150\15\62\1\311\2\62\1\311"+
    "\4\62\1\311\4\62\2\311\4\62\1\311\11\62\1\311"+
    "\2\62\1\311\6\62\1\0\5\5\2\0\1\56\3\5"+
    "\12\0\4\5\1\312\3\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\313\7\5\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\12\5\1\164\23\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\10\5\1\237\25\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\6\5\1\314"+
    "\27\5\5\0\5\5\2\0\1\56\3\5\12\0\5\5"+
    "\1\315\2\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\6\5\1\107\27\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\6\5"+
    "\1\316\27\5\5\0\5\5\2\0\1\56\2\5\1\317"+
    "\12\0\10\5\1\0\36\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\5\5\1\320\2\5\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\22\5"+
    "\1\321\13\5\24\0\1\261\100\0\1\264\63\0\3\5"+
    "\5\0\1\5\16\0\1\5\2\0\1\5\4\0\1\5"+
    "\4\0\2\5\4\0\1\5\11\0\1\5\2\0\1\5"+
    "\7\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\15\5\1\322\20\5\4\0\3\62\3\12\2\62\1\147"+
    "\2\62\1\12\1\150\15\62\1\12\2\62\1\12\4\62"+
    "\1\12\4\62\2\12\4\62\1\12\11\62\1\12\2\62"+
    "\1\12\6\62\1\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\323\20\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\160\1\0\36\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\11\5"+
    "\1\324\24\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\15\5\1\325\20\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\12\5\1\237\23\5"+
    "\5\0\5\5\2\0\1\56\1\326\2\5\12\0\10\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\5\1\152\6\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\22\5\1\327\13\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\6\5\1\330\27\5\5\0\5\5\2\0\1\56\1\5"+
    "\1\167\1\5\12\0\10\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\237\1\0\36\5"+
    "\5\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\6\5\1\243\27\5\5\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\5\1\175\6\5\1\0\36\5\5\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\3\5\1\331"+
    "\32\5\5\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\10\5\1\332\25\5\5\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\23\5\1\72\12\5\5\0"+
    "\5\5\2\0\1\56\3\5\12\0\6\5\1\333\1\5"+
    "\1\0\36\5\5\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\334\2\5\1\0\36\5\5\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\35\5\1\152\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13325];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\2\11\25\1\1\11"+
    "\5\1\1\11\3\1\1\0\5\1\3\11\43\1\1\11"+
    "\11\0\4\1\1\11\43\1\11\0\32\1\2\0\1\1"+
    "\2\0\1\1\1\0\15\1\5\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 23: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 26: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 29: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 32: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 34: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 35: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 36: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 37: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 8: 
          { 
          }
        case 41: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 221: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 222: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 223: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
