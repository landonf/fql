/* The following code was generated by JFlex 1.4.3 on 10/14/13 4:02 PM */

/*
 * Generated on 10/14/13 4:02 PM
 */
package fql.parse;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class FqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  //private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\62\1\24"+
    "\1\63\1\23\1\20\1\4\1\56\1\56\1\4\4\4\2\3\1\36"+
    "\1\24\1\15\1\62\1\64\1\24\1\16\1\54\5\5\1\52\1\1"+
    "\1\51\3\1\1\53\5\1\1\50\7\1\1\25\1\10\1\25\1\65"+
    "\1\2\1\0\1\41\1\13\1\42\1\55\1\35\1\32\1\44\1\26"+
    "\1\33\2\1\1\34\1\43\1\40\1\47\1\30\1\45\1\12\1\31"+
    "\1\27\1\11\1\57\1\37\1\60\1\46\1\61\1\22\1\65\1\22"+
    "\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\17\1\1\10\1\11\5\10\1\12\3\10"+
    "\1\0\1\13\2\1\2\4\1\14\1\15\1\16\2\1"+
    "\1\17\7\1\1\17\15\1\1\20\11\0\1\1\1\4"+
    "\1\21\1\4\6\1\1\22\16\1\11\0\1\1\1\4"+
    "\17\1\2\0\1\23\2\0\1\24\1\0\1\1\1\4"+
    "\10\1\1\25\5\0\1\1\1\4\20\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\242\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\242\0\242\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\242\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\242\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\242\0\242"+
    "\0\242\0\u08a6\0\u08dc\0\330\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\242\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\242\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\330\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\330"+
    "\0\u1d52\0\u1a28\0\u1d88\0\u1aca\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\15\1\5\1\25\1\26\1\27\1\30"+
    "\1\5\1\31\2\5\1\32\4\5\1\33\1\6\1\34"+
    "\2\5\1\15\1\35\1\4\1\15\7\36\1\37\11\36"+
    "\1\40\4\36\1\41\3\36\1\42\4\36\1\43\26\36"+
    "\7\44\1\45\16\44\1\46\3\44\1\47\4\44\1\50"+
    "\26\44\67\0\5\5\2\0\1\51\3\5\12\0\10\5"+
    "\1\0\23\5\4\0\3\52\2\6\1\52\2\0\4\52"+
    "\2\0\1\52\7\0\10\52\1\0\17\52\1\6\3\52"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\1\5\1\53\21\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\7\5\1\54\1\0\23\5\4\0\7\12\1\55"+
    "\1\56\3\12\1\57\51\12\17\0\1\13\66\0\1\60"+
    "\1\61\45\0\5\5\2\0\1\51\1\5\1\62\1\5"+
    "\12\0\1\63\1\64\6\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\1\5\1\65\1\5\12\0\5\5\1\64"+
    "\2\5\1\0\23\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\1\5\1\66\3\5\1\67\2\5\1\0\1\5"+
    "\1\70\1\5\1\71\17\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\3\5\1\72\1\64\3\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\1\5\1\73\14\5\1\64\4\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\10\5\1\0\6\5\1\74\11\5"+
    "\1\75\1\76\1\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\10\5\1\77\12\5\5\0\5\5"+
    "\2\0\1\51\1\5\1\100\1\5\12\0\1\5\1\101"+
    "\1\102\5\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\1\103\2\5\12\0\10\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\2\5\1\104"+
    "\20\5\5\0\5\5\2\0\1\51\1\105\2\5\12\0"+
    "\10\5\1\0\23\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\12\5\1\106\10\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\5\5\1\107\1\5\1\110"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\10\5\1\111\12\5\70\0\1\15\1\0"+
    "\7\36\1\0\11\36\1\0\4\36\1\0\3\36\1\0"+
    "\4\36\1\0\26\36\20\0\1\112\74\0\1\113\65\0"+
    "\1\114\3\0\1\115\71\0\1\116\26\0\7\44\1\0"+
    "\16\44\1\0\3\44\1\0\4\44\1\0\26\44\27\0"+
    "\1\117\65\0\1\120\3\0\1\121\71\0\1\122\37\0"+
    "\1\123\54\0\6\52\2\0\4\52\2\0\1\52\7\0"+
    "\10\52\1\0\23\52\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\5\5\1\72\2\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\6\5\1\124\1\5\1\0"+
    "\23\5\4\0\10\55\1\125\3\55\1\126\55\55\1\12"+
    "\1\55\1\12\1\0\1\12\1\127\3\12\12\55\1\12"+
    "\2\55\1\12\5\55\1\12\15\55\1\12\7\55\1\0"+
    "\5\5\2\0\1\51\3\5\12\0\10\5\1\0\2\5"+
    "\1\130\20\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\7\5\1\131\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\10\5\1\132\12\5\5\0"+
    "\5\5\2\0\1\51\1\5\1\133\1\5\12\0\10\5"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\5\5\1\134\15\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\10\5\1\0\16\5\1\64\4\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\1\135\7\5"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\1\5\1\64\6\5\1\0\23\5\5\0\5\5\2\0"+
    "\1\51\1\5\1\64\1\5\12\0\1\5\1\136\1\5"+
    "\1\137\2\5\1\64\1\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\1\140\2\5\12\0\10\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\2\5\1\141\20\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\1\5\1\142\6\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\16\5\1\143"+
    "\4\5\5\0\5\5\2\0\1\51\1\5\1\144\1\5"+
    "\12\0\10\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\1\5\1\145\6\5\1\0\23\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\2\5\1\146\5\5"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\1\5\1\147"+
    "\1\5\12\0\10\5\1\0\23\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\2\5\1\150\5\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\7\5\1\151"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\13\5\1\152\7\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\3\5\1\153\4\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\6\5\1\154"+
    "\1\5\1\0\23\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\5\5\1\70\2\5\1\0\23\5\33\0\1\155"+
    "\66\0\1\156\71\0\1\157\70\0\1\160\55\0\1\161"+
    "\66\0\1\162\71\0\1\163\70\0\1\164\31\0\3\165"+
    "\5\0\1\165\16\0\1\165\2\0\1\165\3\0\2\165"+
    "\11\0\3\165\10\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\2\5\1\166\20\5\4\0\7\55\1\0"+
    "\61\55\3\167\2\55\1\125\2\55\1\167\1\126\15\55"+
    "\1\167\2\55\1\167\3\55\2\167\11\55\3\167\7\55"+
    "\1\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\1\5\1\170\21\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\1\5\1\64\21\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\2\5\1\64\5\5\1\0"+
    "\23\5\5\0\5\5\2\0\1\51\3\5\12\0\5\5"+
    "\1\171\2\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\4\5\1\172\16\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\7\5\1\173\1\0"+
    "\23\5\5\0\5\5\2\0\1\51\3\5\12\0\1\5"+
    "\1\174\6\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\2\5\1\175\20\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\6\5\1\64\1\5"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\7\5\1\176\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\7\5\1\177\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\10\5\1\200"+
    "\12\5\5\0\5\5\2\0\1\51\1\5\1\201\1\5"+
    "\12\0\10\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\6\5\1\202\1\5\1\0\23\5\5\0"+
    "\5\5\2\0\1\51\1\5\1\202\1\5\12\0\10\5"+
    "\1\0\23\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\2\5\1\203\5\5\1\0\23\5\5\0\5\5\2\0"+
    "\1\51\1\5\1\204\1\5\12\0\10\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\14\5\1\205\6\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\1\5\1\206\6\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\1\5\1\172\6\5\1\0"+
    "\23\5\34\0\1\207\73\0\1\210\64\0\1\156\53\0"+
    "\1\211\72\0\1\212\73\0\1\213\64\0\1\162\53\0"+
    "\1\214\45\0\3\215\5\0\1\215\16\0\1\215\2\0"+
    "\1\215\3\0\2\215\11\0\3\215\10\0\5\5\2\0"+
    "\1\51\3\5\12\0\1\5\1\216\6\5\1\0\23\5"+
    "\4\0\3\55\3\217\2\55\1\125\2\55\1\217\1\126"+
    "\15\55\1\217\2\55\1\217\3\55\2\217\11\55\3\217"+
    "\7\55\1\0\5\5\2\0\1\51\3\5\12\0\3\5"+
    "\1\220\4\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\1\5\1\221\21\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\10\5\1\0\2\5"+
    "\1\64\20\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\4\5\1\222\16\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\10\5\1\0\2\5\1\223\20\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\1\5\1\224"+
    "\6\5\1\0\23\5\5\0\5\5\2\0\1\51\1\5"+
    "\1\225\1\5\12\0\10\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\3\5\1\64\4\5\1\0"+
    "\23\5\5\0\5\5\2\0\1\51\3\5\12\0\10\5"+
    "\1\0\1\177\22\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\5\5\1\226\2\5\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\7\5\1\64"+
    "\13\5\5\0\5\5\2\0\1\51\3\5\12\0\5\5"+
    "\1\227\2\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\7\5\1\230\13\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\10\5\1\0\15\5"+
    "\1\64\5\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\10\5\1\0\17\5\1\64\3\5\35\0\1\156\4\0"+
    "\1\210\47\0\1\231\46\0\1\211\1\232\3\211\1\232"+
    "\2\0\3\211\2\0\1\232\1\0\1\211\1\232\1\0"+
    "\3\232\10\211\1\232\23\211\2\232\33\0\1\162\4\0"+
    "\1\213\47\0\1\233\46\0\1\214\1\234\3\214\1\234"+
    "\2\0\3\214\2\0\1\234\1\0\1\214\1\234\1\0"+
    "\3\234\10\214\1\234\23\214\2\234\5\0\3\235\5\0"+
    "\1\235\16\0\1\235\2\0\1\235\3\0\2\235\11\0"+
    "\3\235\10\0\5\5\2\0\1\51\3\5\12\0\5\5"+
    "\1\236\2\5\1\0\23\5\4\0\3\55\3\237\2\55"+
    "\1\125\2\55\1\237\1\126\15\55\1\237\2\55\1\237"+
    "\3\55\2\237\11\55\3\237\7\55\1\0\5\5\2\0"+
    "\1\51\3\5\12\0\4\5\1\240\3\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\5\5\1\136\15\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\2\5\1\230\20\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\1\5\1\241"+
    "\21\5\5\0\5\5\2\0\1\51\3\5\12\0\5\5"+
    "\1\242\2\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\1\5\1\75\21\5\5\0"+
    "\5\5\2\0\1\51\2\5\1\243\12\0\10\5\1\0"+
    "\23\5\5\0\5\5\2\0\1\51\3\5\12\0\10\5"+
    "\1\0\1\5\1\244\21\5\24\0\1\211\65\0\1\214"+
    "\50\0\3\5\5\0\1\5\16\0\1\5\2\0\1\5"+
    "\3\0\2\5\11\0\3\5\10\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\10\5\1\245\12\5\4\0"+
    "\3\55\3\12\2\55\1\125\2\55\1\12\1\126\15\55"+
    "\1\12\2\55\1\12\3\55\2\12\11\55\3\12\7\55"+
    "\1\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\10\5\1\246\12\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\3\5\1\247\17\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\10\5\1\250"+
    "\12\5\5\0\5\5\2\0\1\51\1\251\2\5\12\0"+
    "\10\5\1\0\23\5\5\0\5\5\2\0\1\51\3\5"+
    "\12\0\10\5\1\0\5\5\1\230\15\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\1\5\1\252"+
    "\21\5\5\0\5\5\2\0\1\51\1\5\1\253\1\5"+
    "\12\0\10\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\7\5\1\230\1\0\23\5\5\0\5\5"+
    "\2\0\1\51\3\5\12\0\10\5\1\0\1\5\1\177"+
    "\21\5\5\0\5\5\2\0\1\51\3\5\12\0\1\5"+
    "\1\143\6\5\1\0\23\5\5\0\5\5\2\0\1\51"+
    "\3\5\12\0\10\5\1\0\2\5\1\254\20\5\5\0"+
    "\5\5\2\0\1\51\3\5\12\0\10\5\1\0\4\5"+
    "\1\230\16\5\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\6\5\1\255\1\5\1\0\23\5\5\0\5\5\2\0"+
    "\1\51\3\5\12\0\5\5\1\256\2\5\1\0\23\5"+
    "\5\0\5\5\2\0\1\51\3\5\12\0\10\5\1\0"+
    "\22\5\1\257\5\0\5\5\2\0\1\51\3\5\12\0"+
    "\7\5\1\64\1\0\23\5\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\2\11\20\1\1\11"+
    "\5\1\1\11\3\1\1\0\5\1\3\11\30\1\1\11"+
    "\11\0\2\1\1\11\26\1\11\0\21\1\2\0\1\1"+
    "\2\0\1\1\1\0\13\1\5\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  @SuppressWarnings("unused")
private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  //private int yyline;

  /** the number of characters up to the start of the matched text */
  //private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  //private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 23: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 21: 
          { addToken(Token.RESERVED_WORD);
          }
        case 26: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 29: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 32: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 34: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 35: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 36: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 37: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 8: 
          { 
          }
        case 41: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 176: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 177: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 178: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
