/* The following code was generated by JFlex 1.4.3 on 2/14/14 6:10 PM */

/*
 * Generated on 2/14/14 6:10 PM
 */
package fql.parse;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("unused")
public class FqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\73\1\24"+
    "\1\74\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\73\1\75\1\24\1\16\1\55\3\5\1\42\1\5\1\65\1\1"+
    "\1\60\2\1\1\64\1\66\1\62\2\1\1\40\1\43\1\56\1\61"+
    "\1\41\1\63\1\57\1\1\1\44\1\1\1\25\1\10\1\25\1\76"+
    "\1\2\1\0\1\47\1\13\1\50\1\67\1\35\1\32\1\51\1\26"+
    "\1\33\2\1\1\34\1\46\1\45\1\54\1\30\1\52\1\12\1\31"+
    "\1\27\1\11\1\70\1\37\1\71\1\53\1\72\1\22\1\76\1\22"+
    "\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\23\1\1\10\1\11\5\10\1\12\3\10"+
    "\1\0\1\13\2\1\2\4\1\14\1\15\1\16\3\1"+
    "\1\17\32\1\1\20\11\0\3\1\1\4\1\21\1\4"+
    "\7\1\1\22\24\1\11\0\2\1\1\4\6\1\1\23"+
    "\16\1\2\0\1\24\2\0\1\25\1\0\1\1\1\4"+
    "\13\1\5\0\1\1\1\4\24\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\275\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\275\0\275\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\275\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\275\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\275\0\275\0\275\0\u0b13\0\u0b52\0\u0b91"+
    "\0\374\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\275\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\275\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\374\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\374\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u24ab\0\u2958\0\u2568"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\15\1\5\1\25\1\5\1\26\2\5"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\5\1\34"+
    "\1\35\1\36\10\5\1\37\1\40\2\5\1\15\1\41"+
    "\1\4\1\15\7\42\1\43\11\42\1\44\4\42\1\45"+
    "\3\42\1\46\4\42\1\47\37\42\7\50\1\51\16\50"+
    "\1\52\3\50\1\53\4\50\1\54\37\50\100\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\34\5\4\0"+
    "\3\56\2\6\1\56\2\0\4\56\2\0\1\56\7\0"+
    "\10\56\1\0\34\56\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\6\5\1\57\25\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\7\5\1\60\1\0\34\5"+
    "\4\0\7\12\1\61\1\62\3\12\1\63\62\12\17\0"+
    "\1\13\77\0\1\64\1\65\56\0\5\5\2\0\1\55"+
    "\1\5\1\66\1\5\12\0\1\67\7\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\1\5\1\70\1\5\12\0"+
    "\5\5\1\71\2\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\1\72\2\5\12\0\1\5\1\73\3\5\1\74"+
    "\2\5\1\0\6\5\1\75\2\5\1\76\22\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\3\5\1\77\4\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\6\5\1\100\21\5\1\71\3\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\6\5"+
    "\1\101\4\5\1\102\15\5\1\103\1\104\1\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\2\5"+
    "\1\105\31\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\24\5\1\106\7\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\15\5\1\107\16\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\10\5\1\110\23\5\5\0\5\5\2\0\1\55\1\5"+
    "\1\111\1\5\12\0\1\5\1\112\1\113\5\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\1\114\2\5\12\0"+
    "\10\5\1\0\15\5\1\115\16\5\5\0\5\5\2\0"+
    "\1\55\1\116\2\5\12\0\10\5\1\0\34\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\2\5\1\117\5\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\17\5\1\120\14\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\21\5\1\121\12\5"+
    "\5\0\5\5\2\0\1\55\1\5\1\70\1\5\12\0"+
    "\7\5\1\122\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\15\5\1\123\16\5\101\0"+
    "\1\15\1\0\7\42\1\0\11\42\1\0\4\42\1\0"+
    "\3\42\1\0\4\42\1\0\37\42\20\0\1\124\105\0"+
    "\1\125\76\0\1\126\3\0\1\127\102\0\1\130\37\0"+
    "\7\50\1\0\16\50\1\0\3\50\1\0\4\50\1\0"+
    "\37\50\27\0\1\131\76\0\1\132\3\0\1\133\102\0"+
    "\1\134\50\0\1\135\65\0\6\56\2\0\4\56\2\0"+
    "\1\56\7\0\10\56\1\0\34\56\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\136\2\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\1\5\1\137"+
    "\4\5\1\140\1\5\1\0\34\5\4\0\10\61\1\141"+
    "\3\61\1\142\66\61\1\12\1\61\1\12\1\0\1\12"+
    "\1\143\3\12\12\61\1\12\2\61\1\12\12\61\1\12"+
    "\31\61\1\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\10\5\1\144\23\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\145\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\15\5\1\146"+
    "\16\5\5\0\5\5\2\0\1\55\2\5\1\147\12\0"+
    "\10\5\1\0\34\5\5\0\5\5\2\0\1\55\1\5"+
    "\1\150\1\5\12\0\10\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\12\5\1\151"+
    "\21\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\30\5\1\71\3\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\1\152\7\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\1\5\1\71\6\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\1\5\1\71\1\5"+
    "\12\0\1\5\1\153\1\5\1\154\2\5\1\71\1\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\1\155\2\5"+
    "\12\0\10\5\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\1\156\2\5\12\0\10\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\10\5\1\157"+
    "\23\5\5\0\5\5\2\0\1\55\3\5\12\0\1\5"+
    "\1\160\6\5\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\3\5\1\161\30\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\16\5"+
    "\1\162\15\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\30\5\1\163\3\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\164\1\165\5\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\1\5\1\166\1\5"+
    "\12\0\10\5\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\1\5\1\167\6\5\1\0\34\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\2\5\1\170\5\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\1\5\1\171"+
    "\1\5\12\0\10\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\1\5\1\172\1\5\12\0\10\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\7\5\1\173"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\2\5\1\174\5\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\20\5\1\175\13\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\26\5\1\176\5\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\6\5\1\177\1\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\5\5\1\75\2\5\1\0"+
    "\34\5\33\0\1\200\77\0\1\201\102\0\1\202\101\0"+
    "\1\203\66\0\1\204\77\0\1\205\102\0\1\206\101\0"+
    "\1\207\42\0\3\210\5\0\1\210\16\0\1\210\2\0"+
    "\1\210\4\0\1\210\4\0\2\210\4\0\1\210\11\0"+
    "\1\210\10\0\5\5\2\0\1\55\3\5\12\0\1\5"+
    "\1\71\6\5\1\0\15\5\1\145\16\5\5\0\5\5"+
    "\2\0\1\55\1\211\2\5\12\0\10\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\10\5\1\212\23\5\4\0\7\61\1\0\72\61\3\213"+
    "\2\61\1\141\2\61\1\213\1\142\15\61\1\213\2\61"+
    "\1\213\4\61\1\213\4\61\2\213\4\61\1\213\11\61"+
    "\1\213\7\61\1\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\6\5\1\214\25\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\6\5\1\71\25\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\2\5\1\71"+
    "\5\5\1\0\34\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\3\5\1\215\4\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\5\5\1\216\2\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\7\5\1\217\24\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\7\5\1\220\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\1\5\1\221\6\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\7\5\1\222\24\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\10\5\1\223\23\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\6\5\1\71\1\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\7\5\1\224\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\4\5\1\225\27\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\25\5"+
    "\1\71\6\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\7\5\1\226\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\11\5\1\227\22\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\2\5\1\230\5\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\15\5\1\231\16\5\5\0\5\5\2\0"+
    "\1\55\1\5\1\232\1\5\12\0\10\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\6\5\1\233"+
    "\1\5\1\0\34\5\5\0\5\5\2\0\1\55\1\5"+
    "\1\233\1\5\12\0\10\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\7\5\1\234\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\1\5\1\235\1\5\12\0"+
    "\10\5\1\0\34\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\15\5\1\236\16\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\4\5\1\237"+
    "\27\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\27\5\1\240\4\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\1\5\1\217\6\5\1\0\34\5\34\0"+
    "\1\241\104\0\1\242\75\0\1\201\64\0\1\243\103\0"+
    "\1\244\104\0\1\245\75\0\1\205\64\0\1\246\56\0"+
    "\3\247\5\0\1\247\16\0\1\247\2\0\1\247\4\0"+
    "\1\247\4\0\2\247\4\0\1\247\11\0\1\247\10\0"+
    "\5\5\2\0\1\55\1\5\1\145\1\5\12\0\10\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\1\5\1\250\6\5\1\0\34\5\4\0\3\61\3\251"+
    "\2\61\1\141\2\61\1\251\1\142\15\61\1\251\2\61"+
    "\1\251\4\61\1\251\4\61\2\251\4\61\1\251\11\61"+
    "\1\251\7\61\1\0\5\5\2\0\1\55\3\5\12\0"+
    "\3\5\1\252\4\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\11\5\1\253\22\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\6\5\1\254\25\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\10\5\1\71\23\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\7\5\1\255"+
    "\24\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\10\5\1\256\23\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\1\5\1\257\6\5\1\0\34\5\5\0"+
    "\5\5\2\0\1\55\1\5\1\260\1\5\12\0\10\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\5\5\1\222\26\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\3\5\1\71\4\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\1\71\7\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\5\5\1\261\2\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\1\226\33\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\5\5\1\262\2\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\14\5\1\71\17\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\1\5\1\137\6\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\14\5\1\222\17\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\3\5\1\263\4\5\1\0\34\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\10\5\1\0\21\5\1\264"+
    "\12\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\16\5\1\71\15\5\35\0\1\201\4\0\1\242"+
    "\60\0\1\265\57\0\1\243\1\266\3\243\1\266\2\0"+
    "\3\243\2\0\1\266\1\0\1\243\1\266\1\0\3\266"+
    "\10\243\1\266\34\243\2\266\33\0\1\205\4\0\1\245"+
    "\60\0\1\267\57\0\1\246\1\270\3\246\1\270\2\0"+
    "\3\246\2\0\1\270\1\0\1\246\1\270\1\0\3\270"+
    "\10\246\1\270\34\246\2\270\5\0\3\271\5\0\1\271"+
    "\16\0\1\271\2\0\1\271\4\0\1\271\4\0\2\271"+
    "\4\0\1\271\11\0\1\271\10\0\5\5\2\0\1\55"+
    "\3\5\12\0\5\5\1\272\2\5\1\0\34\5\4\0"+
    "\3\61\3\273\2\61\1\141\2\61\1\273\1\142\15\61"+
    "\1\273\2\61\1\273\4\61\1\273\4\61\2\273\4\61"+
    "\1\273\11\61\1\273\7\61\1\0\5\5\2\0\1\55"+
    "\3\5\12\0\4\5\1\274\3\5\1\0\34\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\1\275\7\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\3\5\12\0\10\5"+
    "\1\0\12\5\1\153\21\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\10\5\1\222\23\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\6\5"+
    "\1\276\25\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\5\5\1\277\2\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\6\5\1\103\25\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\6\5\1\300\25\5\5\0\5\5\2\0\1\55\2\5"+
    "\1\301\12\0\10\5\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\5\5\1\302\2\5\1\0\34\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\22\5\1\303\11\5\24\0\1\243\76\0\1\246\61\0"+
    "\3\5\5\0\1\5\16\0\1\5\2\0\1\5\4\0"+
    "\1\5\4\0\2\5\4\0\1\5\11\0\1\5\10\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\15\5"+
    "\1\304\16\5\4\0\3\61\3\12\2\61\1\141\2\61"+
    "\1\12\1\142\15\61\1\12\2\61\1\12\4\61\1\12"+
    "\4\61\2\12\4\61\1\12\11\61\1\12\7\61\1\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\15\5"+
    "\1\305\16\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\7\5\1\151\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\11\5\1\306\22\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\10\5\1\0\15\5"+
    "\1\307\16\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\12\5\1\222\21\5\5\0\5\5\2\0"+
    "\1\55\1\310\2\5\12\0\10\5\1\0\34\5\5\0"+
    "\5\5\2\0\1\55\3\5\12\0\1\5\1\311\6\5"+
    "\1\0\34\5\5\0\5\5\2\0\1\55\3\5\12\0"+
    "\10\5\1\0\22\5\1\312\11\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\6\5\1\313\25\5"+
    "\5\0\5\5\2\0\1\55\1\5\1\155\1\5\12\0"+
    "\10\5\1\0\34\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\7\5\1\222\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\6\5\1\226\25\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\1\5\1\163"+
    "\6\5\1\0\34\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\7\5\1\71\1\0\34\5\5\0\5\5\2\0"+
    "\1\55\3\5\12\0\10\5\1\0\3\5\1\314\30\5"+
    "\5\0\5\5\2\0\1\55\3\5\12\0\10\5\1\0"+
    "\10\5\1\315\23\5\5\0\5\5\2\0\1\55\3\5"+
    "\12\0\10\5\1\0\23\5\1\71\10\5\5\0\5\5"+
    "\2\0\1\55\3\5\12\0\6\5\1\316\1\5\1\0"+
    "\34\5\5\0\5\5\2\0\1\55\3\5\12\0\5\5"+
    "\1\317\2\5\1\0\34\5\5\0\5\5\2\0\1\55"+
    "\3\5\12\0\10\5\1\0\33\5\1\311\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\2\11\24\1\1\11"+
    "\5\1\1\11\3\1\1\0\5\1\3\11\36\1\1\11"+
    "\11\0\4\1\1\11\35\1\11\0\30\1\2\0\1\1"+
    "\2\0\1\1\1\0\15\1\5\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 23: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 26: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 27: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 28: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 29: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 32: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 33: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 34: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 35: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 36: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 37: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 8: 
          { 
          }
        case 41: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 208: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 209: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 210: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
