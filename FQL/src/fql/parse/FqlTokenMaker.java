/* The following code was generated by JFlex 1.4.3 on 12/10/13 3:20 AM */

/*
 * Generated on 12/10/13 3:20 AM
 */
package fql.parse;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class FqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\6\1\0\1\16\1\14\22\0\1\16\1\5\1\13"+
    "\1\15\1\1\1\5\1\5\1\5\1\23\1\23\1\20\1\71\1\5"+
    "\1\72\1\22\1\17\1\3\3\3\4\3\2\3\1\34\1\5\1\14"+
    "\1\71\1\73\1\5\1\15\1\53\3\4\1\40\1\4\1\63\1\1"+
    "\1\56\2\1\1\62\1\64\1\60\2\1\1\36\1\41\1\54\1\57"+
    "\1\37\1\61\1\55\1\1\1\42\1\1\1\23\1\7\1\23\1\74"+
    "\1\2\1\0\1\45\1\12\1\46\1\65\1\33\1\30\1\47\1\24"+
    "\1\31\2\1\1\32\1\44\1\43\1\52\1\26\1\50\1\11\1\27"+
    "\1\25\1\10\1\66\1\35\1\67\1\51\1\70\1\21\1\74\1\21"+
    "\1\5\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\2\2\1\5"+
    "\1\6\1\2\1\7\1\10\23\2\1\1\1\11\1\1"+
    "\1\12\5\1\1\13\3\1\1\0\1\14\2\2\1\15"+
    "\1\16\3\2\1\17\31\2\1\20\11\0\11\2\1\21"+
    "\23\2\11\0\7\2\1\22\15\2\2\0\1\23\2\0"+
    "\1\24\1\0\14\2\5\0\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\364"+
    "\0\u01ab\0\u01e8\0\364\0\u0225\0\u0262\0\364\0\364\0\u029f"+
    "\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\364\0\u0763\0\364\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\u0894\0\364\0\u08d1\0\u090e\0\u094b\0\u0988"+
    "\0\u09c5\0\u0a02\0\u0a3f\0\364\0\364\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0131\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\364\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u0131\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f"+
    "\0\u1d8c\0\u0131\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u215c\0\u25a6\0\u2213\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\1\5\1\17\1\6\1\20\1\21\1\22\1\23\1\24"+
    "\1\6\1\25\1\16\1\6\1\26\1\6\1\27\2\6"+
    "\1\30\1\31\1\32\1\33\1\6\1\34\1\6\1\35"+
    "\1\36\1\37\10\6\1\40\1\41\2\6\1\16\1\42"+
    "\1\5\1\16\13\43\1\44\61\43\6\45\1\46\11\45"+
    "\1\47\3\45\1\50\3\45\1\51\4\45\1\52\37\45"+
    "\6\53\1\54\15\53\1\55\3\53\1\56\4\53\1\57"+
    "\37\53\76\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\34\6\4\0\3\61\1\7\1\61\2\0\4\61"+
    "\2\0\1\61\6\0\10\61\1\0\34\61\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\6\6\1\62"+
    "\25\6\5\0\4\6\2\0\1\60\3\6\11\0\7\6"+
    "\1\63\1\0\34\6\22\0\1\14\75\0\1\64\1\65"+
    "\55\0\4\6\2\0\1\60\1\6\1\66\1\6\11\0"+
    "\1\67\7\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\1\6\1\70\1\6\11\0\5\6\1\71\2\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\1\72\2\6\11\0"+
    "\1\6\1\73\3\6\1\74\2\6\1\0\6\6\1\75"+
    "\2\6\1\76\22\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\3\6\1\77\4\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\6\6\1\100"+
    "\21\6\1\71\3\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\6\6\1\101\4\6\1\102\15\6"+
    "\1\103\1\104\1\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\2\6\1\105\31\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\24\6\1\106"+
    "\7\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\15\6\1\107\16\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\10\6\1\110\23\6\5\0"+
    "\4\6\2\0\1\60\1\6\1\111\1\6\11\0\1\6"+
    "\1\112\1\113\5\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\1\114\2\6\11\0\10\6\1\0\34\6\5\0"+
    "\4\6\2\0\1\60\1\115\2\6\11\0\10\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\2\6"+
    "\1\116\5\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\17\6\1\117\14\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\21\6"+
    "\1\120\12\6\5\0\4\6\2\0\1\60\1\6\1\70"+
    "\1\6\11\0\7\6\1\121\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\15\6\1\122"+
    "\16\6\77\0\1\16\1\0\13\43\1\0\61\43\6\45"+
    "\1\0\11\45\1\0\3\45\1\0\3\45\1\0\4\45"+
    "\1\0\37\45\17\0\1\123\102\0\1\124\74\0\1\125"+
    "\3\0\1\126\100\0\1\127\37\0\6\53\1\0\15\53"+
    "\1\0\3\53\1\0\4\53\1\0\37\53\25\0\1\130"+
    "\74\0\1\131\3\0\1\132\100\0\1\133\47\0\1\134"+
    "\64\0\5\61\2\0\4\61\2\0\1\61\6\0\10\61"+
    "\1\0\34\61\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\5\6\1\135\2\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\6\6\1\136\1\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\10\6\1\137\23\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\7\6\1\140\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\15\6\1\141\16\6"+
    "\5\0\4\6\2\0\1\60\2\6\1\142\11\0\10\6"+
    "\1\0\34\6\5\0\4\6\2\0\1\60\1\6\1\143"+
    "\1\6\11\0\10\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\12\6\1\144\21\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\30\6\1\71\3\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\145\7\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\71\6\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\1\6\1\71\1\6\11\0"+
    "\1\6\1\146\1\6\1\147\2\6\1\71\1\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\1\150\2\6\11\0"+
    "\10\6\1\0\34\6\5\0\4\6\2\0\1\60\1\151"+
    "\2\6\11\0\10\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\10\6\1\152\23\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\1\6\1\153"+
    "\6\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\3\6\1\154\30\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\16\6\1\155"+
    "\15\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\30\6\1\156\3\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\157\1\160\5\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\1\6\1\161\1\6\11\0"+
    "\10\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\6\1\162\6\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\2\6\1\163\5\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\1\6\1\164\1\6"+
    "\11\0\10\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\7\6\1\165\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\2\6\1\166\5\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\20\6\1\167\13\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\26\6\1\170\5\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\6\6\1\171\1\6"+
    "\1\0\34\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\5\6\1\75\2\6\1\0\34\6\31\0\1\172\75\0"+
    "\1\173\100\0\1\174\77\0\1\175\64\0\1\176\75\0"+
    "\1\177\100\0\1\200\77\0\1\201\42\0\2\202\5\0"+
    "\1\202\15\0\1\202\2\0\1\202\4\0\1\202\4\0"+
    "\2\202\4\0\1\202\11\0\1\202\10\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\71\6\6\1\0\15\6"+
    "\1\140\16\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\10\6\1\203\23\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\6\6\1\204\25\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\6\6\1\71\25\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\2\6\1\71\5\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\3\6\1\205\4\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\5\6"+
    "\1\206\2\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\7\6\1\207\24\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\7\6\1\210\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\1\6"+
    "\1\211\6\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\7\6\1\212\24\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\10\6"+
    "\1\213\23\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\6\6\1\71\1\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\7\6\1\214\1\0\34\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\215\27\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\25\6\1\71\6\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\7\6\1\216\1\0\34\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\11\6"+
    "\1\217\22\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\2\6\1\220\5\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\15\6\1\221\16\6"+
    "\5\0\4\6\2\0\1\60\1\6\1\222\1\6\11\0"+
    "\10\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\6\6\1\223\1\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\1\6\1\223\1\6\11\0\10\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\1\6\1\224\1\6"+
    "\11\0\10\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\15\6\1\225\16\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\4\6"+
    "\1\226\27\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\27\6\1\227\4\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\207\6\6\1\0\34\6"+
    "\32\0\1\230\102\0\1\231\73\0\1\173\63\0\1\232"+
    "\100\0\1\233\102\0\1\234\73\0\1\177\63\0\1\235"+
    "\55\0\2\236\5\0\1\236\15\0\1\236\2\0\1\236"+
    "\4\0\1\236\4\0\2\236\4\0\1\236\11\0\1\236"+
    "\10\0\4\6\2\0\1\60\3\6\11\0\1\6\1\237"+
    "\6\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\3\6\1\240\4\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\11\6\1\241"+
    "\22\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\6\6\1\242\25\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\10\6\1\71\23\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\7\6"+
    "\1\243\24\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\10\6\1\244\23\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\1\6\1\245\6\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\1\6\1\246\1\6\11\0"+
    "\10\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\5\6\1\212\26\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\3\6\1\71\4\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\1\71"+
    "\7\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\247\2\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\1\216\33\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\5\6\1\250"+
    "\2\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\14\6\1\71\17\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\14\6\1\212"+
    "\17\6\5\0\4\6\2\0\1\60\3\6\11\0\3\6"+
    "\1\251\4\6\1\0\34\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\21\6\1\252\12\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\16\6"+
    "\1\71\15\6\33\0\1\173\4\0\1\231\57\0\1\253"+
    "\56\0\1\232\1\254\2\232\1\254\2\0\3\232\2\0"+
    "\1\254\1\0\1\232\1\254\1\0\2\254\10\232\1\254"+
    "\34\232\2\254\31\0\1\177\4\0\1\234\57\0\1\255"+
    "\56\0\1\235\1\256\2\235\1\256\2\0\3\235\2\0"+
    "\1\256\1\0\1\235\1\256\1\0\2\256\10\235\1\256"+
    "\34\235\2\256\5\0\2\257\5\0\1\257\15\0\1\257"+
    "\2\0\1\257\4\0\1\257\4\0\2\257\4\0\1\257"+
    "\11\0\1\257\10\0\4\6\2\0\1\60\3\6\11\0"+
    "\5\6\1\260\2\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\4\6\1\261\3\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\1\262\7\6"+
    "\1\0\34\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\10\6\1\0\12\6\1\146\21\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\10\6\1\0\10\6\1\212\23\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\6\6\1\263\25\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\5\6\1\264\2\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\6\6\1\103"+
    "\25\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\6\6\1\265\25\6\5\0\4\6\2\0\1\60"+
    "\2\6\1\266\11\0\10\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\5\6\1\267\2\6\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\22\6\1\270\11\6\23\0\1\232\74\0\1\235"+
    "\60\0\2\6\5\0\1\6\15\0\1\6\2\0\1\6"+
    "\4\0\1\6\4\0\2\6\4\0\1\6\11\0\1\6"+
    "\10\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\15\6\1\271\16\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\15\6\1\272\16\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\7\6\1\144\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\11\6\1\273\22\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\10\6\1\0\15\6\1\274\16\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\12\6\1\212"+
    "\21\6\5\0\4\6\2\0\1\60\1\275\2\6\11\0"+
    "\10\6\1\0\34\6\5\0\4\6\2\0\1\60\3\6"+
    "\11\0\1\6\1\276\6\6\1\0\34\6\5\0\4\6"+
    "\2\0\1\60\3\6\11\0\10\6\1\0\22\6\1\277"+
    "\11\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\6\6\1\300\25\6\5\0\4\6\2\0\1\60"+
    "\1\6\1\150\1\6\11\0\10\6\1\0\34\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\7\6\1\212\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\6\6\1\216\25\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\1\6\1\156\6\6\1\0\34\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\7\6\1\71\1\0"+
    "\34\6\5\0\4\6\2\0\1\60\3\6\11\0\10\6"+
    "\1\0\3\6\1\301\30\6\5\0\4\6\2\0\1\60"+
    "\3\6\11\0\10\6\1\0\10\6\1\302\23\6\5\0"+
    "\4\6\2\0\1\60\3\6\11\0\10\6\1\0\23\6"+
    "\1\71\10\6\5\0\4\6\2\0\1\60\3\6\11\0"+
    "\6\6\1\303\1\6\1\0\34\6\5\0\4\6\2\0"+
    "\1\60\3\6\11\0\5\6\1\304\2\6\1\0\34\6"+
    "\5\0\4\6\2\0\1\60\3\6\11\0\10\6\1\0"+
    "\33\6\1\276\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11041];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\24\1\1\11\1\1\1\11\5\1\1\11"+
    "\3\1\1\0\3\1\2\11\35\1\1\11\11\0\35\1"+
    "\11\0\25\1\2\0\1\1\2\0\1\1\1\0\14\1"+
    "\5\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 24: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 25: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 26: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 27: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.DATA_TYPE);
          }
        case 29: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 30: break;
        case 20: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 31: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 32: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 33: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 34: break;
        case 5: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 35: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 36: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 37: break;
        case 9: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 38: break;
        case 1: 
          { 
          }
        case 39: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 197: break;
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 198: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 199: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 200: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
