package fql.examples;

public class PeopleExample extends Example {

	@Override
	public String getName() {
		return "People";
	}

	@Override
	public String getText() {
		return s;
	}

	String s = "schema MalesAndFemales = { "
			+ "\n/* Here we have males and females, each with first and last names, living in a dwelling in a city.*/"
			+ "\n	LivesM:Male->Dwelling,"
			+ "\n	LivesF:Female->Dwelling,"
			+ "\n	IsIn:Dwelling->City,"
			+ "\n	DwellingDesc:Dwelling->string,"
			+ "\n	CityName:City->string,"
			+ "\n	FirstNameM:Male->string,"
			+ "\n	LastNameM:Male->string,"
			+ "\n	FirstNameF:Female->string,"
			+ "\n	LastNameF:Female->string;"
			+ "\n}"
			+ "\n"
			+ "\ninstance I : MalesAndFemales = {"
			+ "\n/*We put in the simpsons, and the creators of FQL.*/"
			+ "\n	Male={1,2,3,4,5},"
			+ "\n	Female={1,2,3,4},"
			+ "\n	Dwelling={1,2,3,4},"
			+ "\n	City={1,2,3,4};"
			+ "\n	CityName={(1,Springfield),(2,Shelbyville),(3,Cambridge),(4,Somerville)},"
			+ "\n	FirstNameM={(1,Homer),(2,Bart),(3,Ned),(4,David),(5,Ryan)},"
			+ "\n	LastNameM={(1,Simpson),(2,Simpson),(3,Flanders),(4,Spivak),(5,Wisnesky)},"
			+ "\n	FirstNameF={(1,Marge),(2,Lisa),(3,Maggie),(4,Maud)},"
			+ "\n	LastNameF={(1,Simpson),(2,Simpson),(3,Simpson),(4,Flanders)},"
			+ "\n	DwellingDesc={(1,House),(2,House),(3,SmallAptBldg),(4,LargeAptBldg)},"
			+ "\n	LivesM={(1,1),(2,1),(3,2),(4,3),(5,4)},"
			+ "\n	LivesF={(1,1),(2,1),(3,1),(4,2)},"
			+ "\n	IsIn={(1,1),(2,1),(3,4),(4,3)}"
			+ "\n	}"
			+ "\n	"
			+ "\n"
			+ "\nschema Basic = {"
			+ "\n/* Here we just have people with first names living in cities.*/"
			+ "\n	LivesIn:Person->City,"
			+ "\n	FirstName:Person->string,"
			+ "\n	CityName:City->string;"
			+ "\n}"
			+ "\n"
			+ "\nmapping JustFems : Basic->MalesAndFemales = {"
			+ "\n/*We'll attach Person to Female.*/"
			+ "\n	Person->Female,"
			+ "\n	City->City,"
			+ "\n	FirstName->FirstNameF,"
			+ "\n	CityName->CityName;"
			+ "\n	LivesIn->Female.LivesF.IsIn"
			+ "\n}"
			+ "\n"
			+ "\ninstance JustFemsI : Basic = delta JustFems I /*Get the information about Females.*/"
			+ "\n"
			+ "\nschema VeryBasic = {"
			+ "\n/*We don't plan to have any two cities with the same name, so we remove the key.*/"
			+ "\n	FirstName:Person->string,"
			+ "\n	CityName:Person->string;"
			+ "\n}"
			+ "\n"
			+ "\nmapping Simplify : Basic->VeryBasic = {"
			+ "\n/*Combine the person and the city, so that CityName is an attribute of Person.*/"
			+ "\n	Person->Person,"
			+ "\n	City->Person,"
			+ "\n	FirstName->FirstName,"
			+ "\n	CityName->CityName;"
			+ "\n	LivesIn->Person"
			+ "\n}"
			+ "\n"
			+ "\ninstance SimpleFemsI : VeryBasic = pi Simplify JustFemsI /*A one-table summary of the females.*/"
			+ "\n"
			+ "\n/*SimpleFemsI and SimpleFems2I should return the same thing*/"
			+ "\nmapping idVB:VeryBasic->VeryBasic = id VeryBasic"
			+ "\nquery FemSummary : MalesAndFemales -> VeryBasic = delta JustFems pi Simplify sigma idVB"
			+ "\ninstance SimpleFems2I : VeryBasic = eval FemSummary I"
			+ "\n"
			+ "\nschema People = {"
			+ "\n/*We no longer care about gender, but we want all the data in MalesAndFemales (not just the females).*/"
			+ "\n	Lives:Person->Dwelling,"
			+ "\n	IsIn:Dwelling->City,"
			+ "\n	DwellingDesc:Dwelling->string,"
			+ "\n	FirstName:Person->string,"
			+ "\n	LastName:Person->string,"
			+ "\n	CityName:City->string;"
			+ "\n}"
			+ "\n	"
			+ "\nmapping UnionGenders:MalesAndFemales->People = {"
			+ "\n/*We throw females and males into the same table (Person).*/"
			+ "\n	Male->Person,"
			+ "\n	Female->Person,"
			+ "\n	Dwelling->Dwelling,"
			+ "\n	City->City,"
			+ "\n	DwellingDesc->DwellingDesc,"
			+ "\n	FirstNameM->FirstName,"
			+ "\n	LastNameM->LastName,"
			+ "\n	FirstNameF->FirstName,"
			+ "\n	LastNameF->LastName,"
			+ "\n	CityName->CityName;"
			+ "\n	LivesM->Person.Lives,"
			+ "\n	LivesF->Person.Lives,"
			+ "\n	IsIn->Dwelling.IsIn"
			+ "\n}"
			+ "\n"
			+ "\ninstance UnionGendersI : People = sigma UnionGenders I /*Apply sigma to union the genders.*/"
			+ "\n"
			+ "\nschema Cohabitators = {"
			+ "\n/*We now want a schema that shows pairs of males and females living together.*/"
			+ "\n	Lives:Pair->Dwelling,"
			+ "\n	IsIn:Dwelling->City,"
			+ "\n	DwellingDesc:Dwelling->string,"
			+ "\n	FirstNameM:Pair->string,"
			+ "\n	LastNameM:Pair->string,"
			+ "\n	FirstNameF:Pair->string,"
			+ "\n	LastNameF:Pair->string,"
			+ "\n	CityName:City->string;"
			+ "\n}"
			+ "\n	"
			+ "\n"
			+ "\nmapping BothGenders:MalesAndFemales->Cohabitators = {"
			+ "\n/*We send males and females both to Pair.*/"
			+ "\n	Male->Pair,"
			+ "\n	Female->Pair,"
			+ "\n	Dwelling->Dwelling,"
			+ "\n	City->City,"
			+ "\n	DwellingDesc->DwellingDesc,"
			+ "\n	FirstNameM->FirstNameM,"
			+ "\n	LastNameM->LastNameM,"
			+ "\n	FirstNameF->FirstNameF,"
			+ "\n	LastNameF->LastNameF,"
			+ "\n	CityName->CityName;"
			+ "\n	LivesM->Pair.Lives,"
			+ "\n	LivesF->Pair.Lives,"
			+ "\n	IsIn->Dwelling.IsIn"
			+ "\n}"
			+ "\n"
			+ "\ninstance CohabitatorsI : Cohabitators = pi BothGenders I /*We use pi to join the tables and see our cohabitators.*/"
			+ "\n";

}
